# Assignment 1
Die Webapplikation ist in zwei Teilbereiche geteilt. 
Einerseits den Admin-Bereich, wo Ticket-Vorlagen und alle anderen
Stammdaten verwaltet werden können. Andererseits den Scanner-Bereich,
wo in Papierform vorliegende Tickets mit dem Smartphone 
fotografiert und bearbeitet werden. 

# Assignment 2
Das meiste CSS kommt von Twitter Bootstrap. Vorallem im visuellen
Vorlagen-Editor wurde eigenes CSS erarbeitet. 

# Assignment 3
Wir haben Docker verwendet und die folgenden Container eingerichtet:
- Apache Webserver
- PostgreSQL Datenbank
- Keycloak Identity and Access Management
- PHP Backend
- Java Backend für die Anbindung der ticket-recognition library.

Die Funktionalität des PHP-Backends ist nach technischen Aspekten getrennt:
- ws: REST-Resourcen
- validation: Benutzereingabe-Validierung
- repository: Datenbankzugriff
- public: Öffentlich verfügbare Dateien
- model: Alle Modellklassen
- json: JSON-Serialisierungsklassen
- io: Klassen, welche mit Dateien arbeiten
- i18n: Klassen, welche mit Internationalization zu tun haben.
- components: Komponenten, welche nach MVC die Seiten aufbauen. 

Anhand der URL wird die korrekte Seite gerendert 
und die Navigation zeigt die aktive Seite anders an. 

# Assignment 4
Die Datei index.php entscheided anhand der angefragten URL, welche 
Komponente gerendert werden soll. 

Alle Texte wurden in Deutsch und Englisch erfasst. 
Anhand eines Cookies (oder der Browsersprache) werden die entsprechenden
Texte verwendet.

# Assignment 5
Im Admin-Bereich und im Scanner-Bereich wird mit Formularen gearbeitet. 

# Assignment 6
Im Admin-Bereich unter "Vorlagen" können Ticket-Vorlagen mithilfe eines
visuellen Editors (canvas) editiert werden. Die Eingaben werden mit JavaScript validiert. 

# Assignment 7
Es wurde ein Datenbankschema designed und auf PostgreSQL umgesetzt.
Testdaten wurden erstellt und werden automatisch eingespielt. 
Die Datenbank wurde mithilfe von PDO im PHP-Backend integriert.
Der Admin-Bereich ist wichtiger Teil der Webapplikation. 

# Assignment 8
Defaultmässig wird die Sprache des Browsers verwendet. 
Wenn der Benutzer eine andere Sprache auswählt, 
wird ein Cookie gesetzt. 

Für die Anmeldung von Benutzern wurde KeyCloak integriert,
was nebenbei sehr mühsam mit PHP und Docker ist.
Für die Übergabe des Access Token an das PHP-Backend wird ein Cookie verwendet. 

Eine öffentliche Registrierung macht in unserer Applikation keinen Sinn,
da es sich um keine öffentliche Webseite handelt, sondern um eine
"Geschäftsanwendung". 

Es gibt zwei Rollen: "admin" und "scanner", welche den Zugriff zu den
gleichnamigen Bereichen der Webapplikation erlauben. 

# Assignment 9
Die gesamte Applikation wurde objektorientiert programmiert. 
Der Aufbau einer einzelnen Seite ist ebenfalls in sinnvoll aufgetrennte
Klassen aufgeteilt.

# Assignment 10
AJAX wurde vor allem im visuellen Vorlage-Editor verwendet, um 
eine bereits existierende Vorlage zu laden oder eine neue zu speichern. 

# Assignment 11
Es gibt ein Verzeichnis model, welches alle Modell-Klassen enthält.
Im Verzeichnis components sind alle views und die dazugehörigen
Controller abgelegt. 
Die Views sind mit der Templating-Engine Twig geschrieben.
Die Controller sind in PHP.

Die Datei index.php entscheided anhand der angefragten URL, welche 
Komponente gerendert werden soll. 

# Assignment 12
Alle Seiten, abgesehen vom visuellen Vorlagen-Editor sind responsive.
Der visuelle Vorlagen-Editor ist einigermassen responsive, als dass
sich die Grösse des canvas an die Fenstergrösse anpasst. Allerdings
ist der Vorlagen-Editor nicht mobile-fähig. Aus unserer Sicht ist das 
akzeptabel, da das pixelgenaue definieren einer Vorlage nicht praktisch
auf einem Smartphone ist. 
